"use strict";
/**
 * @packageDocumentation
 * @module @taquito/local-forging
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.localForger = exports.LocalForger = exports.VERSION = exports.getCodec = exports.CODEC = void 0;
const constants_1 = require("./constants");
const decoder_1 = require("./decoder");
const encoder_1 = require("./encoder");
const uint8array_consumer_1 = require("./uint8array-consumer");
var constants_2 = require("./constants");
Object.defineProperty(exports, "CODEC", { enumerable: true, get: function () { return constants_2.CODEC; } });
__exportStar(require("./decoder"), exports);
__exportStar(require("./encoder"), exports);
__exportStar(require("./uint8array-consumer"), exports);
function getCodec(codec) {
    return {
        encoder: encoder_1.encoders[codec],
        decoder: (hex) => {
            const consumer = uint8array_consumer_1.Uint8ArrayConsumer.fromHexString(hex);
            return decoder_1.decoders[codec](consumer);
        },
    };
}
exports.getCodec = getCodec;
var version_1 = require("./version");
Object.defineProperty(exports, "VERSION", { enumerable: true, get: function () { return version_1.VERSION; } });
class LocalForger {
    constructor() {
        this.codec = getCodec(constants_1.CODEC.MANAGER);
    }
    forge(params) {
        return Promise.resolve(this.codec.encoder(params));
    }
    parse(hex) {
        return Promise.resolve(this.codec.decoder(hex));
    }
}
exports.LocalForger = LocalForger;
exports.localForger = new LocalForger();
//# sourceMappingURL=taquito-local-forging.js.map