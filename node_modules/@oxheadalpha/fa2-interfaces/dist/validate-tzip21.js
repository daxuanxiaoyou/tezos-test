"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateTzip21 = void 0;
const utils_1 = require("@taquito/utils");
const ajv_1 = __importDefault(require("ajv"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const tzip21_metadata_schema_json_1 = __importDefault(require("./schemas/tzip21-metadata-schema.json"));
const v = __importStar(require("./meta-validators"));
/**
 * Validate token metadata format in accordance with TZIP-21 standard
 * @param meta object representing token metadata.
 * @returns list of validation errors and/or warnings. Each error string starts
 * with `Error:` prefix and each warning string starts with `Warning:` prefix.
 */
function validateTzip21(meta) {
    const ajv = new ajv_1.default();
    (0, ajv_formats_1.default)(ajv);
    ajv.validate(tzip21_metadata_schema_json_1.default, meta);
    const schemaErrors = ajv.errors
        ? ajv.errors.map(e => `Error: ${e.instancePath} ${e.message}`)
        : [];
    const heuristics = validateHeuristic(meta);
    const heuristicErrors = [...heuristics].flat();
    return [...schemaErrors, ...heuristicErrors];
}
exports.validateTzip21 = validateTzip21;
function* validateHeuristic(meta) {
    const nonEmptyString = v.validateNonEmptyString(meta);
    const required = v.validateRequired(meta);
    const validateUri = v.validateUri(meta);
    yield required('name');
    yield required('decimals');
    if (meta.decimals !== 0)
        yield ['Error: "decimals" must have value 0 for NFTs'];
    yield required('isBooleanAmount');
    if (meta.isBooleanAmount !== true)
        yield ['Error: "isBooleanAmount" must have value true for NFTs'];
    yield nonEmptyString('name');
    yield v.validateRecommended(meta)('description');
    yield nonEmptyString('description');
    yield nonEmptyString('symbol');
    yield required('artifactUri');
    yield validateUri('artifactUri');
    yield validateUri('thumbnailUri');
    yield validateUri('displayUri');
    yield validateUri('externalUri');
    yield nonEmptyString('rights');
    yield validateTags(meta);
    yield validateAttributes(meta);
    yield validateMinter(meta);
}
function validateTags(meta) {
    const tags = meta.tags;
    if (tags === undefined || tags.length == 0)
        return [];
    if (tags.find(t => t === 'awesome') && tags.find(t => t === 'nft'))
        return [
            'Warning: It looks like "tags" property contains sample values "awesome", "nft". Remove or replace them with actual tag values'
        ];
    return [];
}
function validateAttributes(meta) {
    const attributes = meta.attributes;
    if (attributes === undefined || attributes.length == 0)
        return [];
    if (attributes.find(a => a.name === 'sample attribute' && a.value === 'sample value'))
        return [
            'Warning: It looks like "attributes" property contains sample attribute. Remove or replace it with actual attributes'
        ];
    return [];
}
function validateMinter(meta) {
    const minter = meta.minter;
    if (minter === undefined)
        return [];
    const instruction = 'Specify prope minter tz1 address or remove the attribute';
    if (minter === '')
        return [`Error: "minter" attribute is empty. ${instruction}`];
    if ((0, utils_1.validateAddress)(minter) !== utils_1.ValidationResult.VALID)
        return [
            `Error: "minter": "${minter}" is not a valid Tezos address. ${instruction}`
        ];
    return [];
}
//# sourceMappingURL=validate-tzip21.js.map