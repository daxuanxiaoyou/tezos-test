"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fa2 = void 0;
const bignumber_js_1 = require("bignumber.js");
/**
 * FA2 contract API extension
 *
 * Usage example:
 * ```typescript
 * const fa2Contract =
 *   (await tezosApi(tz).at(contractAddress)).with(Fa2);
 * await fa2Contract.transfer(...);
 * ```
 */
const Fa2 = (contract, lambdaView) => {
    const self = {
        queryBalances: (requests) => __awaiter(void 0, void 0, void 0, function* () { return contract.views.balance_of(requests).read(lambdaView); }),
        hasNftTokens: (requests) => __awaiter(void 0, void 0, void 0, function* () {
            const responses = yield self.queryBalances(requests);
            const one = new bignumber_js_1.BigNumber(1);
            const zero = new bignumber_js_1.BigNumber(0);
            const results = responses.map(r => {
                if (one.eq(r.balance))
                    return true;
                else if (zero.eq(r.balance))
                    return false;
                else
                    throw new Error(`Invalid NFT balance ${r.balance}`);
            });
            return results;
        }),
        tokensMetadata: (tokenIds) => __awaiter(void 0, void 0, void 0, function* () {
            const requests = tokenIds.map(id => contract.tzip12().getTokenMetadata(id));
            return Promise.all(requests);
        }),
        transferTokens: transfers => contract.methods.transfer(transfers),
        updateOperators: updates => contract.methods.update_operators(updates)
    };
    return self;
};
exports.Fa2 = Fa2;
//# sourceMappingURL=fa2-interface.js.map