"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runBatch = exports.runMethod = exports.tezosApi = void 0;
const tzip12_1 = require("@taquito/tzip12");
const contractApi = (contract, lambdaView) => ({
    with(createApi) {
        return Object.assign(Object.assign({}, this), createApi(contract, lambdaView));
    }
});
/**
 * Create Tezos API to build modular contract APIs.
 *
 * Usage example:
 * ```typescript
 * const tzt = new TezosToolkit(...);
 *
 * const nftContract =
 *   (await tezosApi(tz).at(contractAddress))
 *   .with(Nft).with(Fa2);
 * // mintTokens() is defined in Nft extension
 * await nftContract.mintTokens(...);
 * // transfer() is defined in Fa2 extension
 * await nftContract.transfer(...);
 * ```
 * @param tzt Taquito toolkit connecting to a block chain
 * @param lambdaView Taquito lambda view contract address to access contract CPS
 * style view entry points ([see](https://tezostaquito.io/docs/lambda_view/)).
 * You need to deploy lambda view contract and use it address with the sandbox.
 * @returns {@link TezosApi} object to build contract access proxies with specified
 * contract
 */
const tezosApi = (tzt, lambdaView) => {
    tzt.addExtension(new tzip12_1.Tzip12Module());
    return {
        at: (contractAddress) => __awaiter(void 0, void 0, void 0, function* () {
            const contract = yield tzt.contract.at(contractAddress, tzip12_1.tzip12);
            return contractApi(contract, lambdaView);
        }),
        useLambdaView: (lambdaView) => (0, exports.tezosApi)(tzt, lambdaView),
        toolkit: tzt
    };
};
exports.tezosApi = tezosApi;
/**
 * Run and confirms a Taquito ContractMethod
 * @param cm - a Taquito ContractMethod
 * @returns  Taquito TransactionOperation
 *
 * Usage example:
 * ```typescript
 * const op: TransactionOperation = await fa2.runMethod(fa2Contract.transferTokens(txs));
 * ```
 */
const runMethod = (cm) => __awaiter(void 0, void 0, void 0, function* () {
    const op = yield cm.send();
    yield op.confirmation();
    return op;
});
exports.runMethod = runMethod;
/**
 * Run and confirms a Taquito batch
 * @param batch - a Taquito OperationBatch
 * @returns  Taquito BatchOperation
 *
 * Usage example:
 * ```typescript
 * const batch = toolkit.contract.batch();
 *
 * batch.withContractCall(fa2Contract.transferTokens(txs1));
 * batch.withContractCall(fa2Contract.transferTokens(txs2));
 *
 * const op: BatchOperation = await fa2.runBatch(batch);
 * ```
 */
const runBatch = (batch) => __awaiter(void 0, void 0, void 0, function* () {
    const op = yield batch.send();
    yield op.confirmation();
    return op;
});
exports.runBatch = runBatch;
//# sourceMappingURL=tezos-api.js.map